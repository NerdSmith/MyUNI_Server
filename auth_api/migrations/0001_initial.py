# Generated by Django 4.2.3 on 2023-07-21 12:16

import auth_api.models
import auth_api.validators
import django.core.validators
from django.db import migrations, models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, unique=True, validators=[auth_api.validators.CustomUnicodeUsernameValidator()], verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=20, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=20, verbose_name='Last name')),
                ('patronymic', models.CharField(blank=True, max_length=20, verbose_name='Patronymic')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='Email')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='Phone')),
                ('is_staff', models.BooleanField(default=False, help_text='Can access admin panel', verbose_name='Is stuff')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Is active')),
                ('is_verified', models.BooleanField(default=False, help_text='Is verified via email confirmation', verbose_name='Is verified')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=auth_api.models.User.get_image_path, validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'gif', 'jpeg'])], verbose_name='User avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', auth_api.models.UserManager()),
            ],
        ),
    ]
